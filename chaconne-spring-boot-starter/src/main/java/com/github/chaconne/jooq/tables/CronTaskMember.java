/*
 * This file is generated by jOOQ.
 */
package com.github.chaconne.jooq.tables;


import com.github.chaconne.jooq.DefaultSchema;
import com.github.chaconne.jooq.tables.records.CronTaskMemberRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CronTaskMember extends TableImpl<CronTaskMemberRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cron_task_member</code>
     */
    public static final CronTaskMember CRON_TASK_MEMBER = new CronTaskMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CronTaskMemberRecord> getRecordType() {
        return CronTaskMemberRecord.class;
    }

    /**
     * The column <code>cron_task_member.member_group</code>.
     */
    public final TableField<CronTaskMemberRecord, String> MEMBER_GROUP = createField(DSL.name("member_group"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cron_task_member.member_id</code>.
     */
    public final TableField<CronTaskMemberRecord, String> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cron_task_member.HOST</code>.
     */
    public final TableField<CronTaskMemberRecord, String> HOST = createField(DSL.name("HOST"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cron_task_member.PORT</code>.
     */
    public final TableField<CronTaskMemberRecord, Integer> PORT = createField(DSL.name("PORT"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cron_task_member.is_ssl</code>.
     */
    public final TableField<CronTaskMemberRecord, Byte> IS_SSL = createField(DSL.name("is_ssl"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>cron_task_member.uptime</code>.
     */
    public final TableField<CronTaskMemberRecord, Long> UPTIME = createField(DSL.name("uptime"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cron_task_member.context_path</code>.
     */
    public final TableField<CronTaskMemberRecord, String> CONTEXT_PATH = createField(DSL.name("context_path"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cron_task_member.ping_url</code>.
     */
    public final TableField<CronTaskMemberRecord, String> PING_URL = createField(DSL.name("ping_url"), SQLDataType.VARCHAR(255), this, "");

    private CronTaskMember(Name alias, Table<CronTaskMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private CronTaskMember(Name alias, Table<CronTaskMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cron_task_member</code> table reference
     */
    public CronTaskMember(String alias) {
        this(DSL.name(alias), CRON_TASK_MEMBER);
    }

    /**
     * Create an aliased <code>cron_task_member</code> table reference
     */
    public CronTaskMember(Name alias) {
        this(alias, CRON_TASK_MEMBER);
    }

    /**
     * Create a <code>cron_task_member</code> table reference
     */
    public CronTaskMember() {
        this(DSL.name("cron_task_member"), null);
    }

    public <O extends Record> CronTaskMember(Table<O> child, ForeignKey<O, CronTaskMemberRecord> key) {
        super(child, key, CRON_TASK_MEMBER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public CronTaskMember as(String alias) {
        return new CronTaskMember(DSL.name(alias), this);
    }

    @Override
    public CronTaskMember as(Name alias) {
        return new CronTaskMember(alias, this);
    }

    @Override
    public CronTaskMember as(Table<?> alias) {
        return new CronTaskMember(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CronTaskMember rename(String name) {
        return new CronTaskMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CronTaskMember rename(Name name) {
        return new CronTaskMember(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CronTaskMember rename(Table<?> name) {
        return new CronTaskMember(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, Integer, Byte, Long, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super String, ? super Integer, ? super Byte, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super String, ? super Integer, ? super Byte, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
