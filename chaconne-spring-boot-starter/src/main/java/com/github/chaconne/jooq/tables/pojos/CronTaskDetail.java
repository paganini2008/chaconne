/*
 * This file is generated by jOOQ.
 */
package com.github.chaconne.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CronTaskDetail implements Serializable {

    private static final long serialVersionUID = 1L;

    private String taskName;
    private String taskGroup;
    private String taskClass;
    private String taskMethod;
    private String host;
    private String url;
    private String initialParameter;
    private String description;
    private byte[] cronExpression;
    private String cron;
    private LocalDateTime nextFiredDatetime;
    private LocalDateTime prevFiredDatetime;
    private String taskStatus;
    private Integer maxRetryCount;
    private Long timeout;
    private LocalDateTime lastModified;

    public CronTaskDetail() {}

    public CronTaskDetail(CronTaskDetail value) {
        this.taskName = value.taskName;
        this.taskGroup = value.taskGroup;
        this.taskClass = value.taskClass;
        this.taskMethod = value.taskMethod;
        this.host = value.host;
        this.url = value.url;
        this.initialParameter = value.initialParameter;
        this.description = value.description;
        this.cronExpression = value.cronExpression;
        this.cron = value.cron;
        this.nextFiredDatetime = value.nextFiredDatetime;
        this.prevFiredDatetime = value.prevFiredDatetime;
        this.taskStatus = value.taskStatus;
        this.maxRetryCount = value.maxRetryCount;
        this.timeout = value.timeout;
        this.lastModified = value.lastModified;
    }

    public CronTaskDetail(
        String taskName,
        String taskGroup,
        String taskClass,
        String taskMethod,
        String host,
        String url,
        String initialParameter,
        String description,
        byte[] cronExpression,
        String cron,
        LocalDateTime nextFiredDatetime,
        LocalDateTime prevFiredDatetime,
        String taskStatus,
        Integer maxRetryCount,
        Long timeout,
        LocalDateTime lastModified
    ) {
        this.taskName = taskName;
        this.taskGroup = taskGroup;
        this.taskClass = taskClass;
        this.taskMethod = taskMethod;
        this.host = host;
        this.url = url;
        this.initialParameter = initialParameter;
        this.description = description;
        this.cronExpression = cronExpression;
        this.cron = cron;
        this.nextFiredDatetime = nextFiredDatetime;
        this.prevFiredDatetime = prevFiredDatetime;
        this.taskStatus = taskStatus;
        this.maxRetryCount = maxRetryCount;
        this.timeout = timeout;
        this.lastModified = lastModified;
    }

    /**
     * Getter for <code>cron_task_detail.task_name</code>.
     */
    public String getTaskName() {
        return this.taskName;
    }

    /**
     * Setter for <code>cron_task_detail.task_name</code>.
     */
    public CronTaskDetail setTaskName(String taskName) {
        this.taskName = taskName;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_group</code>.
     */
    public String getTaskGroup() {
        return this.taskGroup;
    }

    /**
     * Setter for <code>cron_task_detail.task_group</code>.
     */
    public CronTaskDetail setTaskGroup(String taskGroup) {
        this.taskGroup = taskGroup;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_class</code>.
     */
    public String getTaskClass() {
        return this.taskClass;
    }

    /**
     * Setter for <code>cron_task_detail.task_class</code>.
     */
    public CronTaskDetail setTaskClass(String taskClass) {
        this.taskClass = taskClass;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_method</code>.
     */
    public String getTaskMethod() {
        return this.taskMethod;
    }

    /**
     * Setter for <code>cron_task_detail.task_method</code>.
     */
    public CronTaskDetail setTaskMethod(String taskMethod) {
        this.taskMethod = taskMethod;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.host</code>.
     */
    public String getHost() {
        return this.host;
    }

    /**
     * Setter for <code>cron_task_detail.host</code>.
     */
    public CronTaskDetail setHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.url</code>.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Setter for <code>cron_task_detail.url</code>.
     */
    public CronTaskDetail setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.initial_parameter</code>.
     */
    public String getInitialParameter() {
        return this.initialParameter;
    }

    /**
     * Setter for <code>cron_task_detail.initial_parameter</code>.
     */
    public CronTaskDetail setInitialParameter(String initialParameter) {
        this.initialParameter = initialParameter;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.description</code>.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>cron_task_detail.description</code>.
     */
    public CronTaskDetail setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.cron_expression</code>.
     */
    public byte[] getCronExpression() {
        return this.cronExpression;
    }

    /**
     * Setter for <code>cron_task_detail.cron_expression</code>.
     */
    public CronTaskDetail setCronExpression(byte[] cronExpression) {
        this.cronExpression = cronExpression;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.cron</code>.
     */
    public String getCron() {
        return this.cron;
    }

    /**
     * Setter for <code>cron_task_detail.cron</code>.
     */
    public CronTaskDetail setCron(String cron) {
        this.cron = cron;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.next_fired_datetime</code>.
     */
    public LocalDateTime getNextFiredDatetime() {
        return this.nextFiredDatetime;
    }

    /**
     * Setter for <code>cron_task_detail.next_fired_datetime</code>.
     */
    public CronTaskDetail setNextFiredDatetime(LocalDateTime nextFiredDatetime) {
        this.nextFiredDatetime = nextFiredDatetime;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.prev_fired_datetime</code>.
     */
    public LocalDateTime getPrevFiredDatetime() {
        return this.prevFiredDatetime;
    }

    /**
     * Setter for <code>cron_task_detail.prev_fired_datetime</code>.
     */
    public CronTaskDetail setPrevFiredDatetime(LocalDateTime prevFiredDatetime) {
        this.prevFiredDatetime = prevFiredDatetime;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_status</code>.
     */
    public String getTaskStatus() {
        return this.taskStatus;
    }

    /**
     * Setter for <code>cron_task_detail.task_status</code>.
     */
    public CronTaskDetail setTaskStatus(String taskStatus) {
        this.taskStatus = taskStatus;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.max_retry_count</code>.
     */
    public Integer getMaxRetryCount() {
        return this.maxRetryCount;
    }

    /**
     * Setter for <code>cron_task_detail.max_retry_count</code>.
     */
    public CronTaskDetail setMaxRetryCount(Integer maxRetryCount) {
        this.maxRetryCount = maxRetryCount;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.timeout</code>.
     */
    public Long getTimeout() {
        return this.timeout;
    }

    /**
     * Setter for <code>cron_task_detail.timeout</code>.
     */
    public CronTaskDetail setTimeout(Long timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.last_modified</code>.
     */
    public LocalDateTime getLastModified() {
        return this.lastModified;
    }

    /**
     * Setter for <code>cron_task_detail.last_modified</code>.
     */
    public CronTaskDetail setLastModified(LocalDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final CronTaskDetail other = (CronTaskDetail) obj;
        if (this.taskName == null) {
            if (other.taskName != null)
                return false;
        }
        else if (!this.taskName.equals(other.taskName))
            return false;
        if (this.taskGroup == null) {
            if (other.taskGroup != null)
                return false;
        }
        else if (!this.taskGroup.equals(other.taskGroup))
            return false;
        if (this.taskClass == null) {
            if (other.taskClass != null)
                return false;
        }
        else if (!this.taskClass.equals(other.taskClass))
            return false;
        if (this.taskMethod == null) {
            if (other.taskMethod != null)
                return false;
        }
        else if (!this.taskMethod.equals(other.taskMethod))
            return false;
        if (this.host == null) {
            if (other.host != null)
                return false;
        }
        else if (!this.host.equals(other.host))
            return false;
        if (this.url == null) {
            if (other.url != null)
                return false;
        }
        else if (!this.url.equals(other.url))
            return false;
        if (this.initialParameter == null) {
            if (other.initialParameter != null)
                return false;
        }
        else if (!this.initialParameter.equals(other.initialParameter))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.cronExpression == null) {
            if (other.cronExpression != null)
                return false;
        }
        else if (!Arrays.equals(this.cronExpression, other.cronExpression))
            return false;
        if (this.cron == null) {
            if (other.cron != null)
                return false;
        }
        else if (!this.cron.equals(other.cron))
            return false;
        if (this.nextFiredDatetime == null) {
            if (other.nextFiredDatetime != null)
                return false;
        }
        else if (!this.nextFiredDatetime.equals(other.nextFiredDatetime))
            return false;
        if (this.prevFiredDatetime == null) {
            if (other.prevFiredDatetime != null)
                return false;
        }
        else if (!this.prevFiredDatetime.equals(other.prevFiredDatetime))
            return false;
        if (this.taskStatus == null) {
            if (other.taskStatus != null)
                return false;
        }
        else if (!this.taskStatus.equals(other.taskStatus))
            return false;
        if (this.maxRetryCount == null) {
            if (other.maxRetryCount != null)
                return false;
        }
        else if (!this.maxRetryCount.equals(other.maxRetryCount))
            return false;
        if (this.timeout == null) {
            if (other.timeout != null)
                return false;
        }
        else if (!this.timeout.equals(other.timeout))
            return false;
        if (this.lastModified == null) {
            if (other.lastModified != null)
                return false;
        }
        else if (!this.lastModified.equals(other.lastModified))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.taskName == null) ? 0 : this.taskName.hashCode());
        result = prime * result + ((this.taskGroup == null) ? 0 : this.taskGroup.hashCode());
        result = prime * result + ((this.taskClass == null) ? 0 : this.taskClass.hashCode());
        result = prime * result + ((this.taskMethod == null) ? 0 : this.taskMethod.hashCode());
        result = prime * result + ((this.host == null) ? 0 : this.host.hashCode());
        result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
        result = prime * result + ((this.initialParameter == null) ? 0 : this.initialParameter.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.cronExpression == null) ? 0 : Arrays.hashCode(this.cronExpression));
        result = prime * result + ((this.cron == null) ? 0 : this.cron.hashCode());
        result = prime * result + ((this.nextFiredDatetime == null) ? 0 : this.nextFiredDatetime.hashCode());
        result = prime * result + ((this.prevFiredDatetime == null) ? 0 : this.prevFiredDatetime.hashCode());
        result = prime * result + ((this.taskStatus == null) ? 0 : this.taskStatus.hashCode());
        result = prime * result + ((this.maxRetryCount == null) ? 0 : this.maxRetryCount.hashCode());
        result = prime * result + ((this.timeout == null) ? 0 : this.timeout.hashCode());
        result = prime * result + ((this.lastModified == null) ? 0 : this.lastModified.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CronTaskDetail (");

        sb.append(taskName);
        sb.append(", ").append(taskGroup);
        sb.append(", ").append(taskClass);
        sb.append(", ").append(taskMethod);
        sb.append(", ").append(host);
        sb.append(", ").append(url);
        sb.append(", ").append(initialParameter);
        sb.append(", ").append(description);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(cron);
        sb.append(", ").append(nextFiredDatetime);
        sb.append(", ").append(prevFiredDatetime);
        sb.append(", ").append(taskStatus);
        sb.append(", ").append(maxRetryCount);
        sb.append(", ").append(timeout);
        sb.append(", ").append(lastModified);

        sb.append(")");
        return sb.toString();
    }
}
