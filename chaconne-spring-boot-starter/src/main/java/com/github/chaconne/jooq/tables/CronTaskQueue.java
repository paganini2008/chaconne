/*
 * This file is generated by jOOQ.
 */
package com.github.chaconne.jooq.tables;


import com.github.chaconne.jooq.DefaultSchema;
import com.github.chaconne.jooq.tables.records.CronTaskQueueRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CronTaskQueue extends TableImpl<CronTaskQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cron_task_queue</code>
     */
    public static final CronTaskQueue CRON_TASK_QUEUE = new CronTaskQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CronTaskQueueRecord> getRecordType() {
        return CronTaskQueueRecord.class;
    }

    /**
     * The column <code>cron_task_queue.fired_datetime</code>.
     */
    public final TableField<CronTaskQueueRecord, LocalDateTime> FIRED_DATETIME = createField(DSL.name("fired_datetime"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>cron_task_queue.task_name</code>.
     */
    public final TableField<CronTaskQueueRecord, String> TASK_NAME = createField(DSL.name("task_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cron_task_queue.task_group</code>.
     */
    public final TableField<CronTaskQueueRecord, String> TASK_GROUP = createField(DSL.name("task_group"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private CronTaskQueue(Name alias, Table<CronTaskQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private CronTaskQueue(Name alias, Table<CronTaskQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cron_task_queue</code> table reference
     */
    public CronTaskQueue(String alias) {
        this(DSL.name(alias), CRON_TASK_QUEUE);
    }

    /**
     * Create an aliased <code>cron_task_queue</code> table reference
     */
    public CronTaskQueue(Name alias) {
        this(alias, CRON_TASK_QUEUE);
    }

    /**
     * Create a <code>cron_task_queue</code> table reference
     */
    public CronTaskQueue() {
        this(DSL.name("cron_task_queue"), null);
    }

    public <O extends Record> CronTaskQueue(Table<O> child, ForeignKey<O, CronTaskQueueRecord> key) {
        super(child, key, CRON_TASK_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public CronTaskQueue as(String alias) {
        return new CronTaskQueue(DSL.name(alias), this);
    }

    @Override
    public CronTaskQueue as(Name alias) {
        return new CronTaskQueue(alias, this);
    }

    @Override
    public CronTaskQueue as(Table<?> alias) {
        return new CronTaskQueue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CronTaskQueue rename(String name) {
        return new CronTaskQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CronTaskQueue rename(Name name) {
        return new CronTaskQueue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CronTaskQueue rename(Table<?> name) {
        return new CronTaskQueue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<LocalDateTime, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
