/*
 * This file is generated by jOOQ.
 */
package com.github.chaconne.jooq.tables.records;


import com.github.chaconne.jooq.tables.CronTaskQueue;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CronTaskQueueRecord extends TableRecordImpl<CronTaskQueueRecord> implements Record3<LocalDateTime, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>cron_task_queue.fired_datetime</code>.
     */
    public CronTaskQueueRecord setFiredDatetime(LocalDateTime value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_queue.fired_datetime</code>.
     */
    public LocalDateTime getFiredDatetime() {
        return (LocalDateTime) get(0);
    }

    /**
     * Setter for <code>cron_task_queue.task_name</code>.
     */
    public CronTaskQueueRecord setTaskName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_queue.task_name</code>.
     */
    public String getTaskName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>cron_task_queue.task_group</code>.
     */
    public CronTaskQueueRecord setTaskGroup(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_queue.task_group</code>.
     */
    public String getTaskGroup() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<LocalDateTime, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<LocalDateTime, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<LocalDateTime> field1() {
        return CronTaskQueue.CRON_TASK_QUEUE.FIRED_DATETIME;
    }

    @Override
    public Field<String> field2() {
        return CronTaskQueue.CRON_TASK_QUEUE.TASK_NAME;
    }

    @Override
    public Field<String> field3() {
        return CronTaskQueue.CRON_TASK_QUEUE.TASK_GROUP;
    }

    @Override
    public LocalDateTime component1() {
        return getFiredDatetime();
    }

    @Override
    public String component2() {
        return getTaskName();
    }

    @Override
    public String component3() {
        return getTaskGroup();
    }

    @Override
    public LocalDateTime value1() {
        return getFiredDatetime();
    }

    @Override
    public String value2() {
        return getTaskName();
    }

    @Override
    public String value3() {
        return getTaskGroup();
    }

    @Override
    public CronTaskQueueRecord value1(LocalDateTime value) {
        setFiredDatetime(value);
        return this;
    }

    @Override
    public CronTaskQueueRecord value2(String value) {
        setTaskName(value);
        return this;
    }

    @Override
    public CronTaskQueueRecord value3(String value) {
        setTaskGroup(value);
        return this;
    }

    @Override
    public CronTaskQueueRecord values(LocalDateTime value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CronTaskQueueRecord
     */
    public CronTaskQueueRecord() {
        super(CronTaskQueue.CRON_TASK_QUEUE);
    }

    /**
     * Create a detached, initialised CronTaskQueueRecord
     */
    public CronTaskQueueRecord(LocalDateTime firedDatetime, String taskName, String taskGroup) {
        super(CronTaskQueue.CRON_TASK_QUEUE);

        setFiredDatetime(firedDatetime);
        setTaskName(taskName);
        setTaskGroup(taskGroup);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CronTaskQueueRecord
     */
    public CronTaskQueueRecord(com.github.chaconne.jooq.tables.pojos.CronTaskQueue value) {
        super(CronTaskQueue.CRON_TASK_QUEUE);

        if (value != null) {
            setFiredDatetime(value.getFiredDatetime());
            setTaskName(value.getTaskName());
            setTaskGroup(value.getTaskGroup());
            resetChangedOnNotNull();
        }
    }
}
