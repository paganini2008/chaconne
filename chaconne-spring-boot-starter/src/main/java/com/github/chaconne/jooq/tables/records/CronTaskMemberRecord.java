/*
 * This file is generated by jOOQ.
 */
package com.github.chaconne.jooq.tables.records;


import com.github.chaconne.jooq.tables.CronTaskMember;

import org.jooq.Field;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CronTaskMemberRecord extends TableRecordImpl<CronTaskMemberRecord> implements Record8<String, String, String, Integer, Byte, Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>cron_task_member.member_group</code>.
     */
    public CronTaskMemberRecord setMemberGroup(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_member.member_group</code>.
     */
    public String getMemberGroup() {
        return (String) get(0);
    }

    /**
     * Setter for <code>cron_task_member.member_id</code>.
     */
    public CronTaskMemberRecord setMemberId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_member.member_id</code>.
     */
    public String getMemberId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>cron_task_member.HOST</code>.
     */
    public CronTaskMemberRecord setHost(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_member.HOST</code>.
     */
    public String getHost() {
        return (String) get(2);
    }

    /**
     * Setter for <code>cron_task_member.PORT</code>.
     */
    public CronTaskMemberRecord setPort(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_member.PORT</code>.
     */
    public Integer getPort() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>cron_task_member.is_ssl</code>.
     */
    public CronTaskMemberRecord setIsSsl(Byte value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_member.is_ssl</code>.
     */
    public Byte getIsSsl() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>cron_task_member.uptime</code>.
     */
    public CronTaskMemberRecord setUptime(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_member.uptime</code>.
     */
    public Long getUptime() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>cron_task_member.context_path</code>.
     */
    public CronTaskMemberRecord setContextPath(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_member.context_path</code>.
     */
    public String getContextPath() {
        return (String) get(6);
    }

    /**
     * Setter for <code>cron_task_member.ping_url</code>.
     */
    public CronTaskMemberRecord setPingUrl(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_member.ping_url</code>.
     */
    public String getPingUrl() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, Integer, Byte, Long, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<String, String, String, Integer, Byte, Long, String, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CronTaskMember.CRON_TASK_MEMBER.MEMBER_GROUP;
    }

    @Override
    public Field<String> field2() {
        return CronTaskMember.CRON_TASK_MEMBER.MEMBER_ID;
    }

    @Override
    public Field<String> field3() {
        return CronTaskMember.CRON_TASK_MEMBER.HOST;
    }

    @Override
    public Field<Integer> field4() {
        return CronTaskMember.CRON_TASK_MEMBER.PORT;
    }

    @Override
    public Field<Byte> field5() {
        return CronTaskMember.CRON_TASK_MEMBER.IS_SSL;
    }

    @Override
    public Field<Long> field6() {
        return CronTaskMember.CRON_TASK_MEMBER.UPTIME;
    }

    @Override
    public Field<String> field7() {
        return CronTaskMember.CRON_TASK_MEMBER.CONTEXT_PATH;
    }

    @Override
    public Field<String> field8() {
        return CronTaskMember.CRON_TASK_MEMBER.PING_URL;
    }

    @Override
    public String component1() {
        return getMemberGroup();
    }

    @Override
    public String component2() {
        return getMemberId();
    }

    @Override
    public String component3() {
        return getHost();
    }

    @Override
    public Integer component4() {
        return getPort();
    }

    @Override
    public Byte component5() {
        return getIsSsl();
    }

    @Override
    public Long component6() {
        return getUptime();
    }

    @Override
    public String component7() {
        return getContextPath();
    }

    @Override
    public String component8() {
        return getPingUrl();
    }

    @Override
    public String value1() {
        return getMemberGroup();
    }

    @Override
    public String value2() {
        return getMemberId();
    }

    @Override
    public String value3() {
        return getHost();
    }

    @Override
    public Integer value4() {
        return getPort();
    }

    @Override
    public Byte value5() {
        return getIsSsl();
    }

    @Override
    public Long value6() {
        return getUptime();
    }

    @Override
    public String value7() {
        return getContextPath();
    }

    @Override
    public String value8() {
        return getPingUrl();
    }

    @Override
    public CronTaskMemberRecord value1(String value) {
        setMemberGroup(value);
        return this;
    }

    @Override
    public CronTaskMemberRecord value2(String value) {
        setMemberId(value);
        return this;
    }

    @Override
    public CronTaskMemberRecord value3(String value) {
        setHost(value);
        return this;
    }

    @Override
    public CronTaskMemberRecord value4(Integer value) {
        setPort(value);
        return this;
    }

    @Override
    public CronTaskMemberRecord value5(Byte value) {
        setIsSsl(value);
        return this;
    }

    @Override
    public CronTaskMemberRecord value6(Long value) {
        setUptime(value);
        return this;
    }

    @Override
    public CronTaskMemberRecord value7(String value) {
        setContextPath(value);
        return this;
    }

    @Override
    public CronTaskMemberRecord value8(String value) {
        setPingUrl(value);
        return this;
    }

    @Override
    public CronTaskMemberRecord values(String value1, String value2, String value3, Integer value4, Byte value5, Long value6, String value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CronTaskMemberRecord
     */
    public CronTaskMemberRecord() {
        super(CronTaskMember.CRON_TASK_MEMBER);
    }

    /**
     * Create a detached, initialised CronTaskMemberRecord
     */
    public CronTaskMemberRecord(String memberGroup, String memberId, String host, Integer port, Byte isSsl, Long uptime, String contextPath, String pingUrl) {
        super(CronTaskMember.CRON_TASK_MEMBER);

        setMemberGroup(memberGroup);
        setMemberId(memberId);
        setHost(host);
        setPort(port);
        setIsSsl(isSsl);
        setUptime(uptime);
        setContextPath(contextPath);
        setPingUrl(pingUrl);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CronTaskMemberRecord
     */
    public CronTaskMemberRecord(com.github.chaconne.jooq.tables.pojos.CronTaskMember value) {
        super(CronTaskMember.CRON_TASK_MEMBER);

        if (value != null) {
            setMemberGroup(value.getMemberGroup());
            setMemberId(value.getMemberId());
            setHost(value.getHost());
            setPort(value.getPort());
            setIsSsl(value.getIsSsl());
            setUptime(value.getUptime());
            setContextPath(value.getContextPath());
            setPingUrl(value.getPingUrl());
            resetChangedOnNotNull();
        }
    }
}
