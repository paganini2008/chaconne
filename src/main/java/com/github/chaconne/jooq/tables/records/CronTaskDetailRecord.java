/*
 * This file is generated by jOOQ.
 */
package com.github.chaconne.jooq.tables.records;


import com.github.chaconne.jooq.tables.CronTaskDetail;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CronTaskDetailRecord extends TableRecordImpl<CronTaskDetailRecord> implements Record14<String, String, String, String, String, String, byte[], String, LocalDateTime, LocalDateTime, String, Integer, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>cron_task_detail.task_name</code>.
     */
    public CronTaskDetailRecord setTaskName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_name</code>.
     */
    public String getTaskName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>cron_task_detail.task_group</code>.
     */
    public CronTaskDetailRecord setTaskGroup(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_group</code>.
     */
    public String getTaskGroup() {
        return (String) get(1);
    }

    /**
     * Setter for <code>cron_task_detail.task_class</code>.
     */
    public CronTaskDetailRecord setTaskClass(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_class</code>.
     */
    public String getTaskClass() {
        return (String) get(2);
    }

    /**
     * Setter for <code>cron_task_detail.task_method</code>.
     */
    public CronTaskDetailRecord setTaskMethod(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_method</code>.
     */
    public String getTaskMethod() {
        return (String) get(3);
    }

    /**
     * Setter for <code>cron_task_detail.initial_parameter</code>.
     */
    public CronTaskDetailRecord setInitialParameter(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.initial_parameter</code>.
     */
    public String getInitialParameter() {
        return (String) get(4);
    }

    /**
     * Setter for <code>cron_task_detail.description</code>.
     */
    public CronTaskDetailRecord setDescription(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.description</code>.
     */
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for <code>cron_task_detail.cron_expression</code>.
     */
    public CronTaskDetailRecord setCronExpression(byte[] value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.cron_expression</code>.
     */
    public byte[] getCronExpression() {
        return (byte[]) get(6);
    }

    /**
     * Setter for <code>cron_task_detail.cron</code>.
     */
    public CronTaskDetailRecord setCron(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.cron</code>.
     */
    public String getCron() {
        return (String) get(7);
    }

    /**
     * Setter for <code>cron_task_detail.next_fired_datetime</code>.
     */
    public CronTaskDetailRecord setNextFiredDatetime(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.next_fired_datetime</code>.
     */
    public LocalDateTime getNextFiredDatetime() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>cron_task_detail.prev_fired_datetime</code>.
     */
    public CronTaskDetailRecord setPrevFiredDatetime(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.prev_fired_datetime</code>.
     */
    public LocalDateTime getPrevFiredDatetime() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>cron_task_detail.task_status</code>.
     */
    public CronTaskDetailRecord setTaskStatus(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.task_status</code>.
     */
    public String getTaskStatus() {
        return (String) get(10);
    }

    /**
     * Setter for <code>cron_task_detail.max_retry_count</code>.
     */
    public CronTaskDetailRecord setMaxRetryCount(Integer value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.max_retry_count</code>.
     */
    public Integer getMaxRetryCount() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>cron_task_detail.timeout</code>.
     */
    public CronTaskDetailRecord setTimeout(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.timeout</code>.
     */
    public Long getTimeout() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>cron_task_detail.last_modified</code>.
     */
    public CronTaskDetailRecord setLastModified(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>cron_task_detail.last_modified</code>.
     */
    public LocalDateTime getLastModified() {
        return (LocalDateTime) get(13);
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, String, String, String, byte[], String, LocalDateTime, LocalDateTime, String, Integer, Long, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<String, String, String, String, String, String, byte[], String, LocalDateTime, LocalDateTime, String, Integer, Long, LocalDateTime> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CronTaskDetail.CRON_TASK_DETAIL.TASK_NAME;
    }

    @Override
    public Field<String> field2() {
        return CronTaskDetail.CRON_TASK_DETAIL.TASK_GROUP;
    }

    @Override
    public Field<String> field3() {
        return CronTaskDetail.CRON_TASK_DETAIL.TASK_CLASS;
    }

    @Override
    public Field<String> field4() {
        return CronTaskDetail.CRON_TASK_DETAIL.TASK_METHOD;
    }

    @Override
    public Field<String> field5() {
        return CronTaskDetail.CRON_TASK_DETAIL.INITIAL_PARAMETER;
    }

    @Override
    public Field<String> field6() {
        return CronTaskDetail.CRON_TASK_DETAIL.DESCRIPTION;
    }

    @Override
    public Field<byte[]> field7() {
        return CronTaskDetail.CRON_TASK_DETAIL.CRON_EXPRESSION;
    }

    @Override
    public Field<String> field8() {
        return CronTaskDetail.CRON_TASK_DETAIL.CRON;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return CronTaskDetail.CRON_TASK_DETAIL.NEXT_FIRED_DATETIME;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return CronTaskDetail.CRON_TASK_DETAIL.PREV_FIRED_DATETIME;
    }

    @Override
    public Field<String> field11() {
        return CronTaskDetail.CRON_TASK_DETAIL.TASK_STATUS;
    }

    @Override
    public Field<Integer> field12() {
        return CronTaskDetail.CRON_TASK_DETAIL.MAX_RETRY_COUNT;
    }

    @Override
    public Field<Long> field13() {
        return CronTaskDetail.CRON_TASK_DETAIL.TIMEOUT;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return CronTaskDetail.CRON_TASK_DETAIL.LAST_MODIFIED;
    }

    @Override
    public String component1() {
        return getTaskName();
    }

    @Override
    public String component2() {
        return getTaskGroup();
    }

    @Override
    public String component3() {
        return getTaskClass();
    }

    @Override
    public String component4() {
        return getTaskMethod();
    }

    @Override
    public String component5() {
        return getInitialParameter();
    }

    @Override
    public String component6() {
        return getDescription();
    }

    @Override
    public byte[] component7() {
        return getCronExpression();
    }

    @Override
    public String component8() {
        return getCron();
    }

    @Override
    public LocalDateTime component9() {
        return getNextFiredDatetime();
    }

    @Override
    public LocalDateTime component10() {
        return getPrevFiredDatetime();
    }

    @Override
    public String component11() {
        return getTaskStatus();
    }

    @Override
    public Integer component12() {
        return getMaxRetryCount();
    }

    @Override
    public Long component13() {
        return getTimeout();
    }

    @Override
    public LocalDateTime component14() {
        return getLastModified();
    }

    @Override
    public String value1() {
        return getTaskName();
    }

    @Override
    public String value2() {
        return getTaskGroup();
    }

    @Override
    public String value3() {
        return getTaskClass();
    }

    @Override
    public String value4() {
        return getTaskMethod();
    }

    @Override
    public String value5() {
        return getInitialParameter();
    }

    @Override
    public String value6() {
        return getDescription();
    }

    @Override
    public byte[] value7() {
        return getCronExpression();
    }

    @Override
    public String value8() {
        return getCron();
    }

    @Override
    public LocalDateTime value9() {
        return getNextFiredDatetime();
    }

    @Override
    public LocalDateTime value10() {
        return getPrevFiredDatetime();
    }

    @Override
    public String value11() {
        return getTaskStatus();
    }

    @Override
    public Integer value12() {
        return getMaxRetryCount();
    }

    @Override
    public Long value13() {
        return getTimeout();
    }

    @Override
    public LocalDateTime value14() {
        return getLastModified();
    }

    @Override
    public CronTaskDetailRecord value1(String value) {
        setTaskName(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value2(String value) {
        setTaskGroup(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value3(String value) {
        setTaskClass(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value4(String value) {
        setTaskMethod(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value5(String value) {
        setInitialParameter(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value6(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value7(byte[] value) {
        setCronExpression(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value8(String value) {
        setCron(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value9(LocalDateTime value) {
        setNextFiredDatetime(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value10(LocalDateTime value) {
        setPrevFiredDatetime(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value11(String value) {
        setTaskStatus(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value12(Integer value) {
        setMaxRetryCount(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value13(Long value) {
        setTimeout(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord value14(LocalDateTime value) {
        setLastModified(value);
        return this;
    }

    @Override
    public CronTaskDetailRecord values(String value1, String value2, String value3, String value4, String value5, String value6, byte[] value7, String value8, LocalDateTime value9, LocalDateTime value10, String value11, Integer value12, Long value13, LocalDateTime value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CronTaskDetailRecord
     */
    public CronTaskDetailRecord() {
        super(CronTaskDetail.CRON_TASK_DETAIL);
    }

    /**
     * Create a detached, initialised CronTaskDetailRecord
     */
    public CronTaskDetailRecord(String taskName, String taskGroup, String taskClass, String taskMethod, String initialParameter, String description, byte[] cronExpression, String cron, LocalDateTime nextFiredDatetime, LocalDateTime prevFiredDatetime, String taskStatus, Integer maxRetryCount, Long timeout, LocalDateTime lastModified) {
        super(CronTaskDetail.CRON_TASK_DETAIL);

        setTaskName(taskName);
        setTaskGroup(taskGroup);
        setTaskClass(taskClass);
        setTaskMethod(taskMethod);
        setInitialParameter(initialParameter);
        setDescription(description);
        setCronExpression(cronExpression);
        setCron(cron);
        setNextFiredDatetime(nextFiredDatetime);
        setPrevFiredDatetime(prevFiredDatetime);
        setTaskStatus(taskStatus);
        setMaxRetryCount(maxRetryCount);
        setTimeout(timeout);
        setLastModified(lastModified);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CronTaskDetailRecord
     */
    public CronTaskDetailRecord(com.github.chaconne.jooq.tables.pojos.CronTaskDetail value) {
        super(CronTaskDetail.CRON_TASK_DETAIL);

        if (value != null) {
            setTaskName(value.getTaskName());
            setTaskGroup(value.getTaskGroup());
            setTaskClass(value.getTaskClass());
            setTaskMethod(value.getTaskMethod());
            setInitialParameter(value.getInitialParameter());
            setDescription(value.getDescription());
            setCronExpression(value.getCronExpression());
            setCron(value.getCron());
            setNextFiredDatetime(value.getNextFiredDatetime());
            setPrevFiredDatetime(value.getPrevFiredDatetime());
            setTaskStatus(value.getTaskStatus());
            setMaxRetryCount(value.getMaxRetryCount());
            setTimeout(value.getTimeout());
            setLastModified(value.getLastModified());
            resetChangedOnNotNull();
        }
    }
}
